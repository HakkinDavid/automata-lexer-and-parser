<programa> -> <librerías> <espacio_nombres> <función_principal> <funciones>

Comentarios--------------------------------------------------------------------------------------------------
 
<comentario> -> // <texto> | /* <texto> */ | ε ///////////////////////////////como agregar a todas partes

Arriba del main---------------------------------------------------------------------------------------------

<librerías> -> #include <nombre_librería> <librerías> | ε

<nombre_librería> -> <<nombre>.h> 
                    | "<nombre>.h"

<espacio_nombres> -> using namespace std; 
                    | ε

<función_principal> -> int main ( ) { <declaraciones> <enunciados> return 0;}

Dentro de una funcion-----------------------------------------------------------------------------------------------

<declaraciones> -> <declaración> <declaraciones> 
                    | ε ////////////////////////////se puede hacer todas partes pero mejor practica desde el inicio

<declaración> -> <tipo> <nombre> ; 
                | <tipo> <nombre> = <expresiones> ;

Codigo despues de declaraciones iniciales------------------------------------------------------------------------

<enunciados> -> <enunciado> <enunciados> 
                | ε

<enunciado> -> <asignación> ; 
                | <entrada> ; 
                | <salida> ; 
                | <selección> 
                | <iteración>  
                | <llamada_función> ; 
                | <switch> 

<asignación> -> <asignación-int>
                <asignación-string>
                <asignación-char>
                <asignación-bool>
                <asignación-double>
                <asignación-float>

<asignación-int> -> <nombre> = <expresiones> ;
                | <nombre>++; 
                | <nombre>--; 

<asignación-char> -> <nombre> = <expresiones> ;


<asignación-string> -> <nombre> = <expresiones> ;


<asignación-bool> -> <nombre> = <expresiones> ;


<asignación-double> -> <nombre> = <expresiones> ;


<asignación-float> -> <nombre> = <expresiones> ;

<selección> -> if ( <condiciones> ) { <enunciados> } <bloques_else>

<bloques_else> -> else if ( <condiciones> ) { <enunciados> } <bloques_else> 
                | else { <enunciados> } 
                | ε

<iteración> -> while ( <condiciones> ) { <enunciados> } 
            | for ( <declaración> ; <condiciones> ; <asignación-int> ) { <enunciados> }

<condiciones> -> <condición> <operador_relacional> <condición> 
            | <condición> <operador_relacional> <condición> <operador_lógico>

<condición> -> <nombre>
            | <número>  
            | <condición> <operador_relacional> <condición> 
            | <condición> <operador_relacional> <condición> <operador_lógico>

<expresiones> -> <expresión> <operador_aritmético> <expresión> 
            | (<expresión> <operador_aritmético> <expresión>)

<expresión> -> <nombre> 
            | <número> 
            | <expresión> <operador_aritmético> <expresión> 
            | (<expresión> <operador_aritmético> <expresión>)

<switch> -> switch (<nombre>) { <casos> }

<casos> -> case <tipo_casos> : <enunciados_switch> <casos>
        | default : <enunciados_switch>
        | ε

<tipo_casos> -> <cadena>
                | <número>

<enunciados_switch> -> <enunciado_switch> <enunciados_switch> 
                | ε

<enunciado_switch> -> <asignación> ; 
                | <entrada> ; 
                | <salida> ; 
                | <selección> 
                | <switch>
                | <iteración>  
                | <llamada_función> ; 
                | break ; 
                | continue ;

LLamar a función-------------------------------------------------------------------------------------------------------

<llamada_función> -> <nombre> ( <argumentos> )

<argumentos> -> <expresión> , <argumentos> 
                | <expresión> 
                | ε

Terminales-----------------------------------------------------------------------------------------------------------

<tipo> -> int 
        | float 
        | double 
        | char 
        | string 
        | bool

<nombre> -> identificador

<número> -> 0...9

<cadena> -> " cualquier texto "

<operador_relacional> -> == 
                        | != 
                        | < 
                        | > 
                        | <= 
                        | >=

<operador_aritmético> -> + 
                        | - 
                        | * 
                        | /

<operador_lógico> -> && 
                    | ||

Entrada--------------------------------------------------------------------------------------------------------------

<entrada> -> scanf ( <cadena> , &<nombre> ) ; 
            | std :: cin >> <nombre> ; 
            | cin >> <nombre> ; 

Imprimir en pantalla------------------------------------------------------------------------------------------------

<salida> -> printf ( <printf_salida> ) ; 
            | std :: cout << <elementos_salida> ; 
            | cout << <elementos_salida> ;

<printfs_salida> -> <printf_salida> << <printfs_salida> 
                | <printf_salida> 


<printf_salida> -> <cadena> 
                | <nombre> 
                | ,

<elementos_salida> -> <elemento_salida> << <elementos_salida> 
                    | <elemento_salida>

<elemento_salida> -> <cadena> 
                    | <nombre> 
                    | endl

<cadena_o_variable> -> <cadena> 
                    | <nombre> 
                    | <cadena_o_variable> << <cadena_o_variable>

Despues del main------------------------------------------------------------------------------------------------------------

<funciones> -> <función> <funciones> 
                | ε

<función> -> <tipo_funcion> <nombre> ( <parámetros> ) { <declaraciones> <enunciados> <retorno> }

<parámetros> -> <tipo> <nombre> , <parámetros> 
                | <tipo_funcion> <nombre> | ε

<tipo_funcion> -> void 
                | int 
                | float 
                | double 
                | char 
                | string 
                | bool

<retorno> -> return <expresión>
            | ε